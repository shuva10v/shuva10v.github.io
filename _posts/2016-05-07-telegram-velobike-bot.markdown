---
layout: post
title:  "Как сделать Telegram бота на примере сервиса для velobike.ru"
date:   2016-05-07 22:40:00 +0300
categories: telegram akka scala heroku velobike
---

## Преамбула

Я люблю пользоваться сервисом велопроката ([velobike](http://velobike.ru/))
в Москве. Это действительно крутая штука! Однако, у них очень глючное приложение.
Судя по всему, оно написано на платформе [Xamarin](https://www.xamarin.com/)
на C# - возможно не самое плохое решение для поддержки сразу нескольких платформ,
но вот на iPhone оно постоянно вылетает, я не успеваю посмотреть карту 
велопарковок и факт наличия велосипедов. Лечится переустановкой, но после 
определенного числа итераций мне это надоело.

## Переходим от идеи к созданию бота 

Ладно, теперь к ITшным штукам. Все много говорят про ботов Telegram,
я тоже решил попробовать сделать такого бота.
Идею для бота я взял самую простую - дать возможность найти ближайшую ко мне 
велопарковку с доступными байками.

У telegram [прекраснейшая документация](https://core.telegram.org/bots/api)
- прочитав ее можно понять как работают боты и что с их помощью можно сделать.
Есть два способа работы бота - опрос сервера на предмет наличия новых сообщений
([getUpdates](https://core.telegram.org/bots/api#getupdates)) и 
использование хуков ([WebHooks](https://core.telegram.org/bots/api#setwebhook)).
Я выбрал второй способ. В первом способе мне не понравилась необходимость
передавать токен бота при каждом запросе (нужно думать где хранить этот 
токен на сервере). Использование WebHooks позволяет передавать токен боту, 
который он может использовать при следующих запросах:

* telegram дергает _https://www.example.com/&lt;token&gt;_ и передает в теле сообщения
параметры запроса от пользователя
* бот получает токен и исходя из запроса пользователя выполняет отправку ему сообщений, используя токен &lt;token&gt;

Единственный раз, когда потребуется токен - прописать его в адрес хука. Сделать это можно, например, через curl:

```
curl -v "https://api.telegram.org/bot<token>/setWebhook?url=https://example.com/webhook/<token>"
```

## Хостинг

Боту нужно где-то хоститься - по сути нужен смотрящий в интернет веб-сервер,
который будет обрабатывать запросы и выполнять бизнес-логику бота.
Заморачиваться с настройкой сервера мне не хотелось, поэтому я 
решил попробовать [heroku](https://www.heroku.com/). Мне понравился мой выбор:

* Полностью снимается вопрос деплоя. Достаточно залить свой код в удаленный 
git-репозиторий heroku и приложение пересобирается. Я выбрал стэк Akka+Scala,
поэтому были небольшие накладные ресурсы на сборку приложения, возможно 
на node.js деплой был бы еще более быстрым.
* Готовый настроенный https (telegram работает только с HTTPS и правильно делает!).

Есть, правда, и минус - **7$** в месяц. Heroku позволяет работать бесплатно,
но только если ваш суточный uptime не более 75%
(_MUST SLEEP 6 HOURS IN A 24 HOUR PERIOD_) - это не круто для бота.
Но, для экспериментов это очень удобно.

Heroku позволяет подключать сторонние сервисы - например для аналитики или хранения данных.
Я подключил инструмент для сбора логов [PaperTrail](https://papertrailapp.com) -
надо ведь посчитать количество пользователей, которые воспользовались
ботом.

## А как же код?

Для реализации сервиса бота я взял Akka HTTP и Scala. Для activator
[есть простой шаблон](http://www.lightbend.com/activator/template/akka-http-microservice) 
микросервиса на Akka HTTP, причем со всеми скриптами запуска приложения heroku из коробки.
Сервис работает по простой логике:

* Получив сообщение от пользователя, он проверяет наличие гео-локации. 
Если гео-локации пользователь не прислал, отправляет пользователю сообщение с просьбой все же прислать координаты.
* После получения гео-локации от пользователя сервис запрашивает актуальное
состоение велопарковок. Спасибо velobike - API у них довольно простой. 
Далее происходит жуткое - полный перебор всех парковок, расчет метрики растояния между координатами 
(живем в приближении, что Москва плоская) и поиск наименьшего расстояния.

Код на [гитхабе](https://github.com/shuva10v/velobike-telegram-bot).


## Результат

Бот живет по адресу [@MskVelobikeBot](https://telegram.me/MskVelobikeBot). Выглядит общение с ботом примерно так:
![velobike]({{ site.url }}/assets/velobike.jpg)